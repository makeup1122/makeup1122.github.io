[{"title":"git自动部署实践","date":"2017-07-28T15:11:59.000Z","path":"2017/07/28/git-auto-deploy/","text":"服务端配置ssh免密码登录配置ssh-key或pem文件等，用以\b本地用户可以免密码登录到服务器。 创建裸库在服务器\b\b\b\b某目录(例：/opt/git)下执行：1#&gt;git clone --bare git@xxxx.com:test.git 该命令从远程库拷贝一份裸库到本地。 \b\b编写\b服务端hooks进入到\b版本库的hooks目录下，创建post-receive文件，添加执行权限：12#&gt;cd test.git &amp;&amp; touch post-receive#&gt;chmod +x post-receive 接下来就是编辑你自己的post-receive文件内容了，也就是自动化部署的过程脚本，我的一个tp5的例子：12345#!/bin/shWORK_TREE=/usr/share/nginx/htmlecho $&#123;WORK_TREE&#125;git --work-tree=$&#123;WORK_TREE&#125; checkout develop --force cd $&#123;WORK_TREE&#125; &amp;&amp; php think migrate:run 客户端配置配置远程git库信息1#&gt; git remote add serverAlias sshUser@50.40.30.20:/opt/git/test.git \b推送至远程服务器1#&gt; git push serverAlias develop 其他","tags":[{"name":"git","slug":"git","permalink":"http://makeup1122.github.io/tags/git/"}]},{"title":"Nginx问题记录","date":"2017-07-10T07:10:49.000Z","path":"2017/07/10/nginx-ueditor-issue/","text":"前言在nginx使用过程中，会有很多问题，在此做记录。 由于请求header过大导致的502错误测试在一个上传附件图片的功能时，每次上传一个附件会在cookie里缓存附件的路径，当缓存的内容超过1KB时，再次请求后台即会发生502错误。nginx的错误日志如下：1[error] 9892#0: *79051 upstream sent too big header while reading response header from upstream 原因是nginx配置项中的proxy_buffer_size参数默认是1KB，请求头部内容超过这个默认值就会报错显示502，在配置文件中添加或修改相应的数值即可。","tags":[{"name":"nginx","slug":"nginx","permalink":"http://makeup1122.github.io/tags/nginx/"},{"name":"ueditor","slug":"ueditor","permalink":"http://makeup1122.github.io/tags/ueditor/"}]},{"title":"学习 .htaccess中的Rewirte","date":"2017-03-01T07:23:11.000Z","path":"2017/03/01/htaccess/","text":"前言使用.htaccess的Rewrite规则，需开启apache的rewrite模块。 指令 RewriteEngine on|off 关闭或者打开Rewirte功能 RewriteBase 基准路径 设置目录级重写的基准URL RewriteCond 字符串参数(Pattern) 匹配参数 定义重写发生的条件。仅当设定的条件满足时，才会执行后面RewriteCond命令。 RewriteRule 匹配参数 替换参数 [flags] 为RewirteEngine定义重写规则。第三个flags参数为可选参数,格式为逗号分隔的一个数组，常用内容: ‘nocase|NC’ (no case) 忽略大小写 ‘passthrough|PT’ 传递参数到下一个规则,主要是为了给*Alias, ScriptAlias, Redirect等指令传递参数。 ‘qsappend|QSA’ ‘last|L’ 最后一条规则，执行完成立即停止Rewirte。 ‘redirect|R [=code]’ 跳转的状态码，默认位302(暂时性转移Temporarily Moved)。 例子 去掉php中的index.php123456&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteCond %&#123;REQUEST_FILENAME&#125; !-d RewriteCond %&#123;REQUEST_FILENAME&#125; !-f RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]&lt;/IfModule&gt; 匹配手机等移动端12345&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteCond %&#123;HTTP_USER_AGENT&#125; &quot;android|blackberry|googlebot-mobile|iemobile|ipad|iphone|ipod|opera mobile|palmos|webos&quot; [NC] RewriteRule ^(.*)$ /mobile/$1 [L,R=302]&lt;/IfModule&gt; 其他用到过的指令 ErrorDocument 错误码 错误页面文档路径12ErrorDocument 403 /error_page/zjn403.htmlErrorDocument 404 /error_page/zjn404.html Options +FollowSymlinks -MultiviewsOptions指令用于启用/关闭某些特性。+FollowSymLinks表示服务器允许在此目录中使用符号连接。-Multiviews不允许使用mod_negotiation提供内容协商的”多重视图”。Options FollowSymLinks必须伴随RewriteEngine On出现。参考:http://man.chinaunix.net/newsoft/Apache2.2_chinese_manual/mod/directives.html","tags":[{"name":"apache","slug":"apache","permalink":"http://makeup1122.github.io/tags/apache/"}]},{"title":"PHP中的引号问题","date":"2017-02-11T07:40:51.000Z","path":"2017/02/11/php-quotation-mark/","text":"&#160; &#160; &#160; &#160;最近用php模拟telnet连接路由器发送指令时，fwrite发送指令后，再次发送回车符(“\\n”)和换行符(“\\r”)执行当前指令时，并没有按照预想的产生任何效果： fwrite($socket_handle,&apos;sys reboot&apos;); fwrite($socket_handle,&apos;\\r\\n&apos;); &#160; &#160; &#160; &#160;查询了一番才发现，php代码中用单引号包含的内容如果含有转义字符，那么转义字符不会被转义，而是当作字符串被处理。换成双引号即可。另外单双引号的区别就是，在单引号内的变量不会被解释执行，其他都一样，使用时保持一致即可。 回车符和换行符的区别 常用转义字符","tags":[{"name":"php","slug":"php","permalink":"http://makeup1122.github.io/tags/php/"}]},{"title":"VisualSVN中的hooks","date":"2017-01-13T06:39:15.000Z","path":"2017/01/13/VisualSVN-hooks/","text":"&#160; &#160; &#160; &#160;使用VisualSVN做SVN的服务端时，在服务端也可以写hooks脚本，比如自动部署到测试环境的apache中，或者强制用户提交commit message等等。由于我们的测试服务器和SVN服务器现在放在一起，所以直接在服务端写脚本进行自动部署，不过这中间遇到几个问题： 脚本无法执行 现象：脚本不执行，没有任何效果。 原因：我们的服务器是windows Server ,所以所有的hooks script应该修改为以.bat后缀结尾的文件，才能被调用。 解决：修改文件后缀为.bat或者.exe即可，其实示例脚本的注释里都有些，只是没仔细看=.=。脚本执行错误 现象：当提交commit到服务器时，提示’readonly’或者’no access’等内容。 原因：在windows环境安装VisualSVN后，在系统服务中，VisualSVN Server是以 Network Server登陆启用的，所以权限很小。没有相应目录或文件的读写权限。 解决：在”服务”-&gt;”VisualSVN Server”-&gt;”属性”-&gt;”登陆”中修改以本地用户登陆然后重启服务即可。 PS：在windows的hook script中最好不要直接调用其他bat脚本。","tags":[{"name":"svn","slug":"svn","permalink":"http://makeup1122.github.io/tags/svn/"},{"name":"hooks","slug":"hooks","permalink":"http://makeup1122.github.io/tags/hooks/"}]},{"title":"PHP中的BOM问题","date":"2017-01-11T00:46:54.000Z","path":"2017/01/11/BOM/","text":"&#160; &#160; &#160; &#160;最近在写html时，发现某个页面的顶部总是有一行内容为&amp;#65279;的空白，导致顶部留下空行，原来发现是windows环境下的BOM导致的。用非记事本的高级编辑器修改下编码，重新保持即可解决问题。&#160; &#160; &#160; &#160;简单来说就是在用类似windows自带的记事本等软件时，在保存一个以UTF-8编码的文件时，会在文件开始的地方插入三个不可见的字符（0xEF 0xBB 0xBF，即BOM），用来表示这个文件的编码格式，但是偏偏php不会自动忽略BOM，所以才会造成页面的 top padding 设置为0，也无法让整个网页紧贴浏览器顶部。 &#160; &#160; &#160; &#160;无独有偶，昨天在做微信开发接入测试的验证服务器有效性时，总是验证失败，提示token check faild，调试发现是我的接口返回值的头部有一行空白，第一反应就是“这不是BOM么”，立马把所有的文件格式重新用UTF-8 without BOM格式保存了一边,发现问题没有解决…后来才发现，是在工程的配置文件(config.php)的开头有一个换行符：123换行符&lt;?php.... 我对php也真是醉了，不愧是最好的语言…","tags":[{"name":"utf8","slug":"utf8","permalink":"http://makeup1122.github.io/tags/utf8/"},{"name":"php","slug":"php","permalink":"http://makeup1122.github.io/tags/php/"}]},{"title":"svn中使用hook script","date":"2016-12-20T08:08:11.000Z","path":"2016/12/20/svn-hook-script/","text":"svn与git最近又回归到使用svn做版本控制，其实svn在权限控制和安全控制方面还是比git有优势的，而且git的学习成本有点高，很难快速上手。相比来说svn有良好的GUI，适合团队管理，而git更适合做纯代码管理。 问题以前使用git时，git有各种hook脚本，在实际生产中非常有用，比如自动推送线上代码的webhooks，再比如每次git pull后自动执行数据库迁移程序来同步数据库更新内容。最近发现svn也有hook script的功能，可以与git的hook功能完成相同的任务。 设置本地Hook添加hook脚本：空白位置鼠标右键-&gt;TortoiseSVN-&gt;setting-&gt;Hook Script-&gt;add其中的Hook Type大概有以下几种: start-commit 它在提交事务产生前已运行，通常用来判定一个用户是否有权提交。 pre-commit 在事务完成提交之前运行。 post-commit 它在事务完成后运行。大多数人用这个钩子来发送关于提交的描述性电子邮件，或者作为版本库的备份。 post-update 它在update操作完成后运行。我用这个执行迁移脚本。… 我的hook scriptcd /d %~dp0 cd .. php think migrate:run 该文件保存为post-update-hook.bat cd /d %~dp0 执行结果：切换至脚本所在目录 /d 切换目录的同时切换盘符 %0 代表批处理本身 %~d0 将 %0 扩充到一个驱动器号 %~p0 将 %0 扩充到一个路径 php think migrate:run tp5的数据库迁移命令","tags":[{"name":"svn","slug":"svn","permalink":"http://makeup1122.github.io/tags/svn/"},{"name":"hooks","slug":"hooks","permalink":"http://makeup1122.github.io/tags/hooks/"}]},{"title":"linux常用命令小结","date":"2016-12-07T08:26:07.000Z","path":"2016/12/07/linuxa常用命令小结/","text":"日常工作中常用命令和工具的记录 命令简介备注 `nload` 根据系统网络设备统计流量数据，只能统计网络设备的总流量非自带，需安装 `nethogs` 用来按进程或程序实时统计网络带宽使用率 非自带，需安装","tags":[{"name":"linux","slug":"linux","permalink":"http://makeup1122.github.io/tags/linux/"}]},{"title":"what's for new?","date":"2016-11-20T04:57:50.000Z","path":"2016/11/20/what-s-for-new/","text":"世界上只有两种编程语言：一种是天天被人喷的，另一种是没人用的。","tags":[{"name":"others","slug":"others","permalink":"http://makeup1122.github.io/tags/others/"}]},{"title":"This's War!","date":"2016-11-10T08:52:59.000Z","path":"2016/11/10/this-is-War/","text":"","tags":[{"name":"photo","slug":"photo","permalink":"http://makeup1122.github.io/tags/photo/"}]},{"title":"调试ssh免密码登录","date":"2016-11-08T01:44:28.000Z","path":"2016/11/08/debug-ssh-auth/","text":"问题及解决我的DS215j在升级到DSM6.0后，ssh免密码登录就一直失效，提示 Using username &quot;admin&quot;. Server refused our key admin@172.16.5.249&apos;s password: 确定公钥没问题后，很长时间没找到问题，后来在synology论坛看到大神解决方法，找到了问题所在。原来免密码登录需涉及到服务端3个目录或文件的权限问，分别是： #&gt;chmod 0755 /home/admin #&gt;chmod 0700 /home/admin/.ssh #&gt;chmod 0600 /home/admin/.ssh/authorized_keys 之前一直以为只要.ssh目录和authorized_keys文件的权限正确即可，没有想的DSM再升级6.x后，修改了家目录权限。修正家目录的权限，去掉组用户(groups)和其他用户的(others)写权限后，即可免密码登录。 解决思路大神的发现问题的方法是建立了一个debug模式的sshd临时服务： #&gt; /bin/sshd -d -p xxxx xxx为调试用的端口号 sshd执行需要使用绝对路径 -d为调试模式，可输出调试信息当家目录权限不正确时，会有如下提示: Authentication refused: bad ownership or modes for directory /home/admin 论坛链接:https://forum.synology.com/enu/viewtopic.php?t=116726","tags":[{"name":"ssh","slug":"ssh","permalink":"http://makeup1122.github.io/tags/ssh/"},{"name":"linux","slug":"linux","permalink":"http://makeup1122.github.io/tags/linux/"},{"name":"synology","slug":"synology","permalink":"http://makeup1122.github.io/tags/synology/"}]},{"title":"php.ini配置文件","date":"2016-11-07T08:53:30.000Z","path":"2016/11/07/php-ini/","text":"最近做服务器迁移时，忘记在新的服务器上配置php的upload_max_filesize配置项，导致前台上传超过默认值(2MB)的附件时，会发生错误从而无法上传。很久之前配置过这个选项，而且遇到了很多问题，但未进行记录，这次记录一下。 找到php.ini文件 编译安装php时，&#39;—with-config-file-path选项可以指定php.ini文件的搜索路径，默认为PREFIX/lib。 官方手册中，加载php.ini的搜索路径如下(按顺序); SAPI 模块所指定的位置（Apache 2 中的 PHPIniDir 指令，CGI 和 CLI 中的 -c 命令行选项，NSAPI 中的 php_ini 参数，THTTPD 中的 PHP_INI_PATH 环境变量）。PHPRC 环境变量。在 PHP 5.2.0 之前，其顺序在以下提及的注册表键值之后。 自 PHP 5.2.0 起，可以为不同版本的 PHP 指定不同的 php.ini 文件位置。将以下面的顺序检查注册表目录：[HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y.z]，[HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x.y] 和 [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP\\x]，其中的 x，y 和 z 指的是 PHP 主版本号，次版本号和发行批次。如果在其中任何目录下的 IniFilePath 有键值，则第一个值将被用作 php.ini 的位置（仅适用于 windows）。 [HKEY_LOCAL_MACHINE\\SOFTWARE\\PHP] 内 IniFilePath 的值（Windows 注册表位置）。 当前工作目录（对于 CLI）。 web 服务器目录（对于 SAPI 模块）或 PHP 所在目录（Windows 下其它情况）。 Windows 目录（C:\\windows 或 C:\\winnt），或 –with-config-file-path 编译时选项指定的位置。 无论是php命令还是Php-fpm命令： 都可以通过-i选项打印所加载的php.ini内容，没找到php.ini时，全部采用默认配置。可以参考php源码目录中的php.ini-production和php.ini-development 都可以通过-c选项在CLI启动时手动指定php.ini的位置或者文件名称。 通过php --ini命令查询加载的php.ini文件。奇怪的是当我执行php --ini后，得到的结果是： Configuration File (php.ini) Path: /usr/local/lib 但是，我把php.ini文件放到这个/usr/local/lib目录下，再次执行php --ini时，依旧无法找到，所以我只能按照官方文档的方式，放到当前工作目录，即与Php命令放在同一目录下。 修改php.ini文件修改附件上传限制，可能需要修改的参数： upload_max_filesize = 8M post_max_size = 8M 生效如果是使用的php-fpm，则直接reload即可 #&gt; service php-fpm reload","tags":[{"name":"php","slug":"php","permalink":"http://makeup1122.github.io/tags/php/"},{"name":"linux","slug":"linux","permalink":"http://makeup1122.github.io/tags/linux/"}]},{"title":"git-webhooks","date":"2016-10-28T09:03:40.000Z","path":"2016/10/28/github-webhooks/","text":"前言git的webhooks是个好东西呀，怎么没早点发现!github和git.oschina 也早已都支持了，看来是我out了。原理是当设置了某个线上git代码库的webhooks后，当代码库发生指定事件(比如push、pull、create、delete等等)时，就会向指定的URL链接发起请求(POST)，这样就可以发挥想象力做很多事件，最常见的应该就是当有push操作时，同步更新线上的代码。省去了登录线上服务器，进行pull代码等重复操作。下文皆以github为例子，其他代码托管网站应该都类似的。 添加webhooks 参数 Payload URL是必填参数，即发生指定事件时要通知的链接。 Content type 发送请求的内容类型，有json格式和form data两种。 secret 自定义密钥，被加载请求中一并发给Payload URL，保存在header的X-Hub-Signature中，可以用作验证请求。 可用事件:https://developer.github.com/webhooks/#events服务器配置添加完webhooks后，hook已经准备好了，但服务器端的配置才是最重要的。ngrok这个是github官网介绍的一个小工具，用来给内网用户设置一个外网访问地址的，用法也很简单，下载ngrok程序，只有一个exe文件，直接双击就可以进入命令行，执行如下命令即可启动服务： ngrok http 80启动后可以登录http://localhost:4040 就可以看到生成的外网URL链接，还可以看到请求和响应的内容。ngrok的1.0版本是免费的，如过注册了ngrok的用户，还可以生成安全口令、创建TCP连接，开启多通道等等功能。但是ngrok毕竟是国外的，服务很不稳定，原因你懂得。但是1.0版本是开源的，国内友人仿照版本，可自行查找。 node.js版服务端测试代码1234567891011121314var http = require(&apos;http&apos;);var child_process = require(&quot;child_process&quot;);http.createServer(function(req, res) &#123; var post_data = &apos;&apos;; req.on(&apos;data&apos;, function(chunk) &#123; post_data += chunk; &#125;); req.on(&apos;end&apos;, function() &#123; var result = child_process.execSync(&apos;git pull origin master&apos;); &#125;); res.writeHead(200, &#123; &apos;Content-Type&apos;: &apos;text/plain&apos; &#125;); res.end(&apos;get push post!&apos;);&#125;).listen(8888); 第三方工具npm上有很多github Webhooks的第三方的中间件，可以拿来直接用的。 参考文档:https://developer.github.com/webhooks/","tags":[{"name":"hooks","slug":"hooks","permalink":"http://makeup1122.github.io/tags/hooks/"},{"name":"git","slug":"git","permalink":"http://makeup1122.github.io/tags/git/"}]},{"title":"ssh动态端口转发命令解析","date":"2016-10-27T14:38:36.000Z","path":"2016/10/27/ssh动态端口转发命令解析/","text":"命令全貌：ssh -qfTnN -D 0.0.0.0:1080 SSH_SERVER -l user -o ServerAliveInterval=60 参数说明： -q 静默模式(Quiet mode). -f 将SSH命令变为后台服务(Requests ssh to go to background just before command execution). -T 不启用为终端，即不占用 shell 了(Disable pseudo-tty allocation). -n 用/dev/null来当ssh的输入，阻止ssh读取本地的标准输入内容(Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.). -N Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only). -D 动态端口转发，在指定端口建立基于SOCKs4和SOCKs5协议的SOCKS服务。默认绑定IP地址为”localhost”，0.0.0.0或者”*”表示接受所以地址的请求。 SSH_SERVER ssh服务器地址 -l 指定登录远程服务器(SSH_SERVER )的用户名 -o 参数选项(以配置文件的形式)。 ServerAliveInterval=60 number of seconds that the client will wait before sending a null packet to the server (to keep the connection alive).默认为0，设置为0即关闭该选项。 其他类似的相关选项还有： ClientAliveInterval 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接 ClientAliveCountMax 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应 ServerAliveInterval 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接 ServerAliveCountMax 3 ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应","tags":[{"name":"ssh","slug":"ssh","permalink":"http://makeup1122.github.io/tags/ssh/"},{"name":"synology","slug":"synology","permalink":"http://makeup1122.github.io/tags/synology/"}]},{"title":"git 参数学习","date":"2016-10-27T02:57:07.000Z","path":"2016/10/27/git相关/","text":"工作实践中遇到了许多很有用的参数，在这里记录一下。 全局 --git-dir .git目录(默认为当前路径) 一般我们都是cd到相应的代码库目录下进行操作，设置该参数即可从任何位置进行git操作。 --git-dir传入的一定是git的路径，也就是用git init --bare创建的目录，或者.git目录。 对应的环境变量:GIT_DIR，可以在脚本中使用。 --work-tree 工作目录(默认为当前路径) 这个命令配合git checkout命令，可以方便的在生产环境导出不带.git目录的生产代码目录。 对应的环境变量:GIT_WORK_TREE，可以在脚本中使用。 -q --quiet 只输出错误信息。 git init --bare 创建一个空的git库。 如GIT_DIR未设置，则在当前目录创建。该选项创建的git库只包含git文件而不包含实际项目的源文件，所以不允许进行一般的git操作，会收到This operation must be run in a work tree的错误，可见并非工作目录。 所以一般远端仓库都是该命令初始化，可减少冲突。 git clone --depth &lt;depth&gt; 指定日志深度。 因为经常使用Could9 IDE,又因为硬盘免费空间只有1GB,所以经常因为.git目录过大导致无法使用。 git checkout -f --force 强制切换分支git branch -r 查看本地所有分支 git log --author 按作者搜索 --pretty 优化输出格式 (--oneline) --date 指定日期的输出格式 git push --all 推送所有本地分支到远程库，比如git push origin --all --delete 删除远程分支，比如删除远程的test分支： $ git push origin --delete test 等同于 $ git push origin :test git reset [&lt;tree-ish&gt;] &lt;paths&gt; 切换所有&lt;paths&gt;文件或目录到&lt;tree-ish&gt;的状态。但并不会影响当前工作目录(working tree)或者当前分支。配合git checkout命令，可以实现还原单个文件历史状态的目的。 git rm --cached 从track列表删除。当已经被跟踪的文件被写到.gitignore里时，依旧每次会继续跟踪。用这个命令即可。.gitignore这个文件是用于 untracked 文件的忽略列表，用add将文件标记为 tracked 状态后 .gitignore就对其无效了 git blame -L &lt;start&gt;,&lt;end&gt; 指定查看的起始行和结束行。 git instalweb创建一个gitweb。 git submodule 适用于git repo 嵌套或引用其他git repo库的情况 用法:git submodule add 仓库地址 路径例如:git submodule add https://github.com/litten/hexo-theme-yilia.git themes/yilia 初始化: git submodule init 更新: git submodule update 删除: 先在根目录的.gitmodules文件中删除相应配置信息，然后执行git rm –cached。 注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone） git update-index --assume-unchanged git config –global pack.windowMemory 256m remote out of memery的解决办法 Bash中的gitgit源码中有几个比较有用Shell脚本的插件，但是这些插件并不是默认打开的。 git-completion.bash 该脚本可以通过键自动补全shell中的git命令。 git-prompt.sh 该脚本可以自定义用户的Shell提示符（prompt)，显示当前目录下的Git仓库信息。这个非常有用，尤其是当我们在Shell中操作多个分支时，免驱不断重复用git status查看分支的烦恼。 这些脚本的下载地址https://github.com/git/git/blob/master/contrib/completion/git-completion.bash 脚本的安装方法,点击这里。","tags":[{"name":"git","slug":"git","permalink":"http://makeup1122.github.io/tags/git/"}]},{"title":"tmux常用命令","date":"2016-10-24T09:07:13.000Z","path":"2016/10/24/tmux/","text":"Ctrl+b 激活控制台；此时以下按键生效 系统操作 ? 列出所有快捷键；按q返回 d 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 D 选择要脱离的会话；在同时开启了多个会话时使用 Ctrl+z 挂起当前会话 r 强制重绘未脱离的会话 s 选择并切换会话；在同时开启了多个会话时使用 : 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 [ 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出 ~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息 窗口操作 c 创建新窗口 &amp; 关闭当前窗口 数字键 切换至指定窗口 p 切换至上一窗口 n 切换至下一窗口 l 在前后两个窗口间互相切换 w 通过窗口列表切换窗口 , 重命名当前窗口；这样便于识别 . 修改当前窗口编号；相当于窗口重新排序 f 在所有窗口中查找指定文本 面板操作 “ 将当前面板平分为上下两块 % 将当前面板平分为左右两块 x 关闭当前面板 ! 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板 Ctrl+方向键 以1个单元格为单位移动边缘以调整当前面板大小 Alt+方向键 以5个单元格为单位移动边缘以调整当前面板大小 Space 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled q 显示面板编号 o 在当前窗口中选择下一面板 方向键 移动光标以选择面板 { 向前置换当前面板 } 向后置换当前面板 Alt+o 逆时针旋转当前窗口的面板 Ctrl+o 顺时针旋转当前窗口的面板","tags":[{"name":"linux","slug":"linux","permalink":"http://makeup1122.github.io/tags/linux/"},{"name":"tmux","slug":"tmux","permalink":"http://makeup1122.github.io/tags/tmux/"}]},{"title":"hexo基本操作","date":"2016-10-23T19:45:02.000Z","path":"2016/10/24/hexo-operate/","text":"基本操作初始化hexo init 新建文章hexo new [layout]&lt;title&gt;如果layout为空，则使用配置文件_config.yml中的default_layout(默认为:post)。 生成静态文件hexo generate 发表草稿hexo publish [layout] &lt;filename&gt; 部署hexo deploy如果配置好_config.yml中的deploy，即可自动发布的github.io 获取文件列表hexo list &lt;type&gt;type为post/draft/page等 清理工作目录hexo clean 启动本地服务hexo server -p 8090 问题 hexo在本地测试运行重启后页面一直空白，提示 ： WARN No layout: index.html,确定theme目录下，相应的目录是否存在或为空 部署时出现 error deployer not found:git错误，可以能是未安装hexo-deployer-git模块 。执行 ： npm install hexo-deployer-git --save即可。 有的theme是不支持Tags的。。。。比如Hacker","tags":[{"name":"hexo","slug":"hexo","permalink":"http://makeup1122.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://makeup1122.github.io/tags/github/"}]}]